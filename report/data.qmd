```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```

# 5 Data

## **5.1 Describe Data**

The initial analysis of our database involves the examination of the main structure using the `str`, `summary` and `datatable` functions.

```{r,warning=FALSE,echo = TRUE}
str(airlines)
summary(airlines)
introduce(airlines)
```

Our data set contains 7,213,446 records of American domestic flights in 2018, with 28 variables in total. Of these variables, 22 are continuous, 5 are discrete, and 1 is missing (*UNNAMED..27*, which will be removed).

Let's focus on both departure and arrival delays. On average, the departure delay is of 10 minutes and arrival delay is of 5 minutes. The median for departure is at -2 minutes, whereas at -6 minutes for arrival delay. This implies that the majority of American flights in 2018 departed and arrived earlier rather than late. Therefore, we expect the distribution to be right-skewed for both variables. We will explore more in depth the variables of interest after taking care of the missing values.

We can also observe that our data frame contains a lot of NA values in 16 of our variables. We will have to look into detail to see the reason why.

Furthermore, we have a lot of variables which describe a date or an hourly value, for example: *ARR_TIME*, *WHEELS_ON*, *WHEELS_OFF* and more. We need to convert them in order for our analysis to make sense.

::: callout-tip
## Fact

The majority of domestic flights in the USA in 2018 either departed or arrived earlier than scheduled. Most delayed flight on arrival was of 45 hours!
:::

## **5.2 Transform data**

One crucial step in pre-processing our data set involves performing preliminary transformations, particularly converting several variables into a date, hour, or minute format. This conversion aims to represent the temporal aspects of the data more formally and facilitate subsequent analysis.

The only variable that needs to be converted to a full date format (year, month, day) is *FL_DATE*. We transform it using the `Lubridate` package.

```{r,warning=FALSE,echo = TRUE}
# Change the FL_DATE variable directly
airlines$FL_DATE <- ymd(airlines$FL_DATE)
str(airlines$FL_DATE)
```

We remove the *Unnamed..27* variable which contains only NA values.

```{r,warning=FALSE,echo = TRUE}
airlines <- dplyr::select(airlines, -Unnamed..27)
```

Next, we deal with the variables having hour and minutes format. This corresponds to features such as *DEP_TIME*, *WHEELS_OFF*, *ARR_TIME*, where we consider a specific time during the day.

## **5.3 Dealing with missing values**

Now, we can have a look at the missing values in our data set.

```{r,warning=FALSE,echo = TRUE}
plot_missing(airlines) # check missing values
```

We see that we have approximately 80% of NA's for 5 variables: Â *CARRIER_DELAY*, *WEATHER_DELAY*, *NAS_DELAY*, *SECURITY_DELAY*, *LATE_AIRCRAFT_DELAY*.

These missing values represent two things. First, it can indicate that the given flight had no delay. Or, if there was a delay, there would still be a NA value for flights that do not belong to that specific reason. Therefore, we will transform these missing values to 0.

```{r,warning=FALSE,echo = TRUE}
# Replace NA values with 0 in selected columns
airlines <- airlines %>% 
  mutate(
    CARRIER_DELAY = ifelse(is.na(CARRIER_DELAY), 0, CARRIER_DELAY),
    WEATHER_DELAY = ifelse(is.na(WEATHER_DELAY), 0, WEATHER_DELAY),
    NAS_DELAY = ifelse(is.na(NAS_DELAY), 0, NAS_DELAY),
    SECURITY_DELAY = ifelse(is.na(SECURITY_DELAY), 0, SECURITY_DELAY),
    LATE_AIRCRAFT_DELAY = ifelse(is.na(LATE_AIRCRAFT_DELAY), 0, LATE_AIRCRAFT_DELAY)
  )
```

We plot again the missing values to check whether there have been improvements.

```{r,warning=FALSE,echo = TRUE}
plot_missing(airlines)
```

Indeed, the 5 variables we modified do not contain any NA's.

Next, we have to take care of the last 10 variables. The range of missing values for all of these variables goes from \~ 1.6 to 2%. They seem to be somewhat connected between each other, just like the ones before. Since our variable of interest *ARR_DELAY* is part of them, we have to carefully look at their structure.

Let's first explore our dataset containing only these NA's.

```{r, echo = FALSE}
airlines %>% 
  filter_all(any_vars(is.na(.))) %>%
  slice(1:5) %>%
  kable()
```

```{r,warning=FALSE,echo = TRUE}
# Let's explore the NA's: we compute the % of cancellation flights to see if they correspond to the % of missing values of: DEP_TIME, DEP_DELAY, TAXI_OUT, WHEELS_OFF, WHEELS_ON, TAXI_IN, ARR_TIME, ARR_DELAY:
freq <- table(airlines$CANCELLED)
perc_1 <- freq[2] / length(airlines$CANCELLED) * 100
perc_0 <- freq[1] / length(airlines$CANCELLED) * 100
cat("Percentage of 1's:", round(perc_1, 2), "%\n")
cat("Percentage of 0's:", round(perc_0, 2), "%\n")
```

As per their descriptions, the variables *Taxi_out* and *Taxi_in* are related to: *Wheels_off*, *Wheels_on*, *Dep_time* and *Arr_time*.

If a flight is cancelled, it means that the aircraft did not depart from the origin airport and did not arrive at the destination airport. Therefore, it is expected that variables related to departure and arrival times (such as *Dep_time*, *Dep_delay*, *Taxi_out*, *Wheels_off*, *Wheels_on*, *Taxi_in*, *Arr_time*, and *Arr_delay*) would be represented as NA's for cancelled flights.

It is also noteworthy that some of the variables that are represented as NA's for cancelled flights (specifically, *Wheels_off* and *Taxi_out*) account for approximately 1.65% of the total observations in the dataset. This indicates that a relatively small proportion of flights in the dataset were cancelled, and that missing values for *Wheels_off* and *Taxi_out* are likely indicators of cancelled flights.

We can notice that most of the Na's in *Taxi_out* will be associated with a missing value in *Taxi_in*. This is true for all of the occurrences where there has been a delay.

When a flight has been diverted, we will only have values for *Taxi_in*, as the flight never reached it's destination.

In rare cases, we have values for *Dep_time* and *Dep_delay* and an NA in *Arr_delay* due to a cancellation. In these cases, the flight seems to have been cancelled almost immediately after taking off.

The NA values for *Arr_delay* are due to one of 3 scenarios: 1) Cancellation 2) Diverted 3) The arrival time is the same as the planned arrival time (therefore, should be 0).

Finally, we can see that every time we have an NA for *Air_time*, we will also have one for *Actual_elapsed_time*. It makes sense as the latter is a formula containing the former.

To sum up, we can be confident that our NA values make sense. Transforming these 10 variables is not necessary, as they are not binary responses as the other 5 we changed. They are continuous representing minutes. Removing them would also not be a good idea, as they contain important information on the nature of the delay (cancellation, diverted).

## **5.4 Dealing with outliers**

Now that we are clear on our missing values, we can focus on the potential outliers we have in our data set.

We use the summary function to see the extreme cases.

```{r,warning=FALSE,echo = TRUE}
summary(airlines$ARR_DELAY)
```

We can note that our minimum and maximum values are respectively -2 hours and 20h 52 min. Both of these values are extreme.

Let's visualize them using box plots.

```{r,warning=FALSE,echo = TRUE}
boxplot(airlines$ARR_DELAY)
```

We can see that we have a rather large spread of values, with some extreme cases going more than 1500 minutes. However, the mean and average are very close to zero, which is what we expected. Having such extreme cases doesn't appear necessarily abnormal. Exceptional events such as extreme weather or other incidents can greatly impact the delay of air flights. We are going to keep these values during our modeling, as they represent event that, even though rare, are at risk of happening.

# **6 Data Transformations for the modelling part**

## **6.1 Converting variables to factors**

To apply Machine Learning models, such as Random Forest, we can't have any numerical variable. Here, we transform them into factors.

```{r,warning=FALSE,echo = TRUE}
# We select columns that we will use to convert the integer to factor
my_cols <- c(2, 4, 5, 16, 17, 18)
# loop over each column and convert to factor in the bank dataset
for (i in seq_along(my_cols)) {
  airlines[[my_cols[i]]] <- factor(airlines[[my_cols[i]]])
}
```

## **6.2 Classification: handling missing values**

We have around 2% of missing values that represent the cancelled flights, therefore for each NA in *DELAY* we have decided to drop the instance. We removed 213 observations in *airlines*.

```{r,warning=FALSE,echo = TRUE}
airlines <- airlines[!is.na(airlines$DELAY), ]
```

## **6.3 Cancellation and Diverted**

By removing the NA's in *DELAY*, we eliminated all of the instances that represented a *CANCELLATION*. Furthermore, as our main analysis is about predicting flight delays and not cancelled flights neither diverted, we have decided to remove *CANCELLED*, *CANCELLATION_CODE* and *DIVERTED* from *airlines* and *airlines_time*. This enables us to have less variables in our data set.

```{r,warning=FALSE,echo = TRUE}
airlines <- dplyr::select(airlines, -CANCELLED, - CANCELLATION_CODE, -DIVERTED)
```

```{r,warning=FALSE,echo = TRUE}
plot_missing(airlines)
airlines <- replace(airlines, is.na(airlines), 0)
```
