sample_n(min(50, n()))
# Filter the original dataset with the destinations
airlines <- airlines %>%
filter(DEST %in% selected_destinations$DEST)
# Check the number of rows in the data frame
total_rows <- nrow(airlines)
# Set the desired number of random observations
n <- 12000
# Randomly select the indices of the observations
set.seed(123)
random_indices <- sample(1:total_rows, n)
# Subset the dataframe using the random indices
airlines <- airlines[random_indices, ]
# For classification purposes, we add a binary variable called DELAY.
airlines$DELAY <- ifelse(airlines$DEP_DELAY > 15, 1, 0)
airlines$DELAY <- as.factor(airlines$DELAY)
# Only take observations which have a delay
airlines$FL_DATE_NEW <- ymd(airlines$FL_DATE)
airlines$season <- cut(month(airlines$FL_DATE_NEW),
breaks=c(0,3,6,9,12),
labels=c("Winter","Spring","Summer","Fall"))
delay_data <- airlines %>%
dplyr::select(season, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) %>%
pivot_longer(cols = CARRIER_DELAY:LATE_AIRCRAFT_DELAY, names_to = "delay_type", values_to = "delay_minutes") %>%
filter(delay_type == "CARRIER_DELAY" & delay_minutes > 0 | delay_type == "WEATHER_DELAY" & delay_minutes > 0  | delay_type == "NAS_DELAY" & delay_minutes > 0  | delay_type == "SECURITY_DELAY" & delay_minutes > 0  | delay_type == "LATE_AIRCRAFT_DELAY" & delay_minutes > 0) %>%
group_by(season, delay_type) %>%
summarise(total_delay_minutes = sum(delay_minutes, na.rm = TRUE))
p <- ggplotly(ggplot(delay_data, aes(x = season, y = total_delay_minutes, fill = delay_type)) +
geom_bar(stat = "identity") +
labs(x = "Season", y = "Total Delay Minutes", fill = "Delay Type") +
ggtitle("Total Delay Minutes by Delay Type and Season") +
facet_wrap(~ delay_type, scales = "free_y"))
ggplotly(p)
library(ggplot2)
library(plotly)
library(dplyr)
delay_data <- airlines %>%
dplyr::select(season, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) %>%
pivot_longer(cols = CARRIER_DELAY:LATE_AIRCRAFT_DELAY, names_to = "delay_type", values_to = "delay_minutes") %>%
filter(delay_type == "CARRIER_DELAY" & delay_minutes > 0 | delay_type == "WEATHER_DELAY" & delay_minutes > 0 | delay_type == "NAS_DELAY" & delay_minutes > 0 | delay_type == "SECURITY_DELAY" & delay_minutes > 0 | delay_type == "LATE_AIRCRAFT_DELAY" & delay_minutes > 0) %>%
group_by(season, delay_type) %>%
summarise(total_delay_minutes = sum(delay_minutes, na.rm = TRUE))
p <- ggplot(delay_data, aes(x = season, y = total_delay_minutes, fill = delay_type)) +
geom_bar(stat = "identity") +
labs(x = "Season", y = "Total Delay Minutes", fill = "Delay Type") +
ggtitle("Total Delay Minutes by Delay Type and Season") +
facet_wrap(~ delay_type, scales = "free_y")
p <- ggplotly(p, width = 600, height = 400)  # Adjust width and height as per your preference
p
library(ggplot2)
library(plotly)
library(dplyr)
library(patchwork)
# Calculate the count of delayed flights for each destination airport
arrival_count <- airlines %>%
filter(DEP_DELAY > 0) %>%
count(DEST, sort = TRUE) %>%
rename(total_delayed = n) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Filter and summarize data for top 10 airports with highest total delayed flights
arrival_data <- airlines %>%
filter(DEST %in% arrival_count$DEST) %>%
group_by(DEST) %>%
summarise(
avg_arr_delay = mean(as.numeric(ARR_DELAY), na.rm = TRUE),
total_cancelled = sum(CANCELLED, na.rm = TRUE),
total_diverted = sum(DIVERTED, na.rm = TRUE)
) %>%
mutate(total_delayed = total_cancelled + total_diverted) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Create first plot for average arrival delay
plot1 <- plot_ly(arrival_data, x = ~DEST, y = ~avg_arr_delay, type = "scatter", mode = "markers",
marker = list(color = "black", size = 10),
name = "Average Departure Delay") %>%
layout(title = "Top 10 Airports with highest number of departure delayed flights",
xaxis = list(title = "Airport name"),
yaxis = list(title = "Average Arrival Delay"))
# Create second plot for sum of cancelled and diverted flights
plot2 <- plot_ly(arrival_data, x = ~DEST, y = ~total_cancelled, type = "bar",
marker = list(color = "red"), name = "Cancelled Flights") %>%
add_trace(y = ~total_diverted, marker = list(color = "blue"), name = "Diverted Flights") %>%
layout(xaxis = list(title = "Airport name"), yaxis = list(title = "Number of Flights"),
barmode = "stack")
# Arrange the two plots side by side using patchwork
combined_plots <- plot1 + plot2
library(ggplot2)
library(plotly)
library(dplyr)
library(patchwork)
# Calculate the count of delayed flights for each destination airport
arrival_count <- airlines %>%
filter(DEP_DELAY > 0) %>%
count(DEST, sort = TRUE) %>%
rename(total_delayed = n) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Filter and summarize data for top 10 airports with highest total delayed flights
arrival_data <- airlines %>%
filter(DEST %in% arrival_count$DEST) %>%
group_by(DEST) %>%
summarise(
avg_arr_delay = mean(as.numeric(ARR_DELAY), na.rm = TRUE),
total_cancelled = sum(CANCELLED, na.rm = TRUE),
total_diverted = sum(DIVERTED, na.rm = TRUE)
) %>%
mutate(total_delayed = total_cancelled + total_diverted) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Create first plot for average arrival delay
plot1 <- ggplotly(
ggplot(arrival_data, aes(x = DEST, y = avg_arr_delay)) +
geom_point(color = "black", size = 2) +
labs(
title = "Top 10 Airports with highest number of departure delayed flights",
x = "Airport name",
y = "Average Arrival Delay"
)
)
# Create second plot for sum of cancelled and diverted flights
plot2 <- ggplotly(
ggplot(arrival_data, aes(x = DEST)) +
geom_bar(aes(y = total_cancelled), stat = "identity", fill = "red", width = 0.5) +
geom_bar(aes(y = total_diverted), stat = "identity", fill = "blue", width = 0.5) +
labs(
x = "Airport name",
y = "Number of Flights",
title = "Top 10 Airports with highest number of departure delayed flights"
) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none")
)
# Arrange the two plots side by side using patchwork
combined_plots <- plot1 + plot2
library(plotly)
library(dplyr)
# Calculate the count of delayed flights for each destination airport
arrival_count <- airlines %>%
filter(DEP_DELAY > 0) %>%
count(DEST, sort = TRUE) %>%
rename(total_delayed = n) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Filter and summarize data for top 10 airports with highest total delayed flights
arrival_data <- airlines %>%
filter(DEST %in% arrival_count$DEST) %>%
group_by(DEST) %>%
summarise(
avg_arr_delay = mean(as.numeric(ARR_DELAY), na.rm = TRUE),
total_cancelled = sum(CANCELLED, na.rm = TRUE),
total_diverted = sum(DIVERTED, na.rm = TRUE)
) %>%
mutate(total_delayed = total_cancelled + total_diverted) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Create first plot for average arrival delay
plot1 <- plot_ly(arrival_data, x = ~DEST, y = ~avg_arr_delay, type = "scatter", mode = "markers",
marker = list(color = "black", size = 10),
name = "Average Departure Delay") %>%
layout(title = "Top 10 Airports with highest number of departure delayed flights",
xaxis = list(title = "Airport name"),
yaxis = list(title = "Average Arrival Delay"),
width = 400, height = 300)  # Adjust width and height as per your preference
# Create second plot for sum of cancelled and diverted flights
plot2 <- plot_ly(arrival_data, x = ~DEST, y = ~total_cancelled, type = "bar",
marker = list(color = "red"), name = "Cancelled Flights") %>%
add_trace(y = ~total_diverted, marker = list(color = "blue"), name = "Diverted Flights") %>%
layout(xaxis = list(title = "Airport name"), yaxis = list(title = "Number of Flights"),
barmode = "stack",
width = 400, height = 300)  # Adjust width and height as per your preference
# Arrange the two plots side by side
subplot(plot1, plot2, nrows = 1)
library(plotly)
library(dplyr)
# Calculate the count of delayed flights for each destination airport
arrival_count <- airlines %>%
filter(DEP_DELAY > 0) %>%
count(DEST, sort = TRUE) %>%
rename(total_delayed = n) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Filter and summarize data for top 10 airports with highest total delayed flights
arrival_data <- airlines %>%
filter(DEST %in% arrival_count$DEST) %>%
group_by(DEST) %>%
summarise(
avg_arr_delay = mean(as.numeric(ARR_DELAY), na.rm = TRUE),
total_cancelled = sum(CANCELLED, na.rm = TRUE),
total_diverted = sum(DIVERTED, na.rm = TRUE)
) %>%
mutate(total_delayed = total_cancelled + total_diverted) %>%
top_n(10, total_delayed) %>%
arrange(desc(total_delayed))
# Create first plot for average arrival delay
plot1 <- plot_ly(arrival_data, x = ~DEST, y = ~avg_arr_delay, type = "scatter", mode = "markers",
marker = list(color = "black", size = 10),
name = "Average Departure Delay") %>%
layout(title = "Top 10 Airports with highest number of departure delayed flights",
xaxis = list(title = "Airport name"),
yaxis = list(title = "Average Arrival Delay"),
width = 800, height = 600)  # Adjust width and height as per your preference
# Create second plot for sum of cancelled and diverted flights
plot2 <- plot_ly(arrival_data, x = ~DEST, y = ~total_cancelled, type = "bar",
marker = list(color = "red"), name = "Cancelled Flights") %>%
add_trace(y = ~total_diverted, marker = list(color = "blue"), name = "Diverted Flights") %>%
layout(xaxis = list(title = "Airport name"), yaxis = list(title = "Number of Flights"),
barmode = "stack",
width = 800, height = 600)  # Adjust width and height as per your preference
# Arrange the two plots side by side
subplot(plot1, plot2, nrows = 1)
source(here::here("scripts/setup.R"))
# Import the CSV file
airlines <- read.csv(here("data", "2018.csv"))
# Filter the original data with the Top 10 airports with highest departure flights
airlines <- airlines %>%
filter(ORIGIN %in% c("ATL", "CLT", "DEN", "DFW", "LAS", "LAX", "LGA", "MSP", "ORD", "PHX"))
# We select 50 destinations at random
set.seed(123)
selected_destinations <- airlines %>%
distinct(DEST) %>%
sample_n(min(50, n()))
# Filter the original dataset with the destinations
airlines <- airlines %>%
filter(DEST %in% selected_destinations$DEST)
# Check the number of rows in the data frame
total_rows <- nrow(airlines)
# Set the desired number of random observations
n <- 12000
# Randomly select the indices of the observations
set.seed(123)
random_indices <- sample(1:total_rows, n)
# Subset the dataframe using the random indices
airlines <- airlines[random_indices, ]
# For classification purposes, we add a binary variable called DELAY.
airlines$DELAY <- ifelse(airlines$DEP_DELAY > 15, 1, 0)
airlines$DELAY <- as.factor(airlines$DELAY)
source(here::here("scripts/setup.R"))
str(airlines)
summary(airlines)
introduce(airlines)
# Change the FL_DATE variable directly
airlines$FL_DATE <- ymd(airlines$FL_DATE)
str(airlines$FL_DATE)
airlines <- dplyr::select(airlines, -Unnamed..27)
plot_missing(airlines) # check missing values
# Replace NA values with 0 in selected columns
airlines <- airlines %>%
mutate(
CARRIER_DELAY = ifelse(is.na(CARRIER_DELAY), 0, CARRIER_DELAY),
WEATHER_DELAY = ifelse(is.na(WEATHER_DELAY), 0, WEATHER_DELAY),
NAS_DELAY = ifelse(is.na(NAS_DELAY), 0, NAS_DELAY),
SECURITY_DELAY = ifelse(is.na(SECURITY_DELAY), 0, SECURITY_DELAY),
LATE_AIRCRAFT_DELAY = ifelse(is.na(LATE_AIRCRAFT_DELAY), 0, LATE_AIRCRAFT_DELAY)
)
plot_missing(airlines)
airlines %>%
filter_all(any_vars(is.na(.))) %>%
slice(1:5) %>%
kable()
# Let's explore the NA's: we compute the % of cancellation flights to see if they correspond to the % of missing values of: DEP_TIME, DEP_DELAY, TAXI_OUT, WHEELS_OFF, WHEELS_ON, TAXI_IN, ARR_TIME, ARR_DELAY:
freq <- table(airlines$CANCELLED)
perc_1 <- freq[2] / length(airlines$CANCELLED) * 100
perc_0 <- freq[1] / length(airlines$CANCELLED) * 100
cat("Percentage of 1's:", round(perc_1, 2), "%\n")
cat("Percentage of 0's:", round(perc_0, 2), "%\n")
summary(airlines$ARR_DELAY)
boxplot(airlines$ARR_DELAY)
# We select columns that we will use to convert the integer to factor
my_cols <- c(2, 4, 5, 16, 17, 18)
# loop over each column and convert to factor in the bank dataset
for (i in seq_along(my_cols)) {
airlines[[my_cols[i]]] <- factor(airlines[[my_cols[i]]])
}
airlines <- airlines[!is.na(airlines$DELAY), ]
airlines <- dplyr::select(airlines, -CANCELLED, - CANCELLATION_CODE, -DIVERTED)
plot_missing(airlines)
airlines <- replace(airlines, is.na(airlines), 0)
###########  FIXED SPLIT ##############
# First step is to arrange the data from earliest to latest date
airlines <-  airlines %>% arrange(FL_DATE)
# Split_date using 80% for training and 20% testing; 80% of 12 is 9.6 so training from January until 18th of September. Testing between 19th of September until end of December.
split_date <- as.Date("2018-09-18")
# Split the data
df_tr_date <- airlines[airlines$FL_DATE < split_date, ]
df_tr_date <- dplyr::select(df_tr_date, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
df_te_date <- airlines[airlines$FL_DATE >= split_date, ]
df_te_date <- dplyr::select(df_te_date, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
########### RANDOM SPLIT ##############
set.seed(123)
trainIndex <- createDataPartition(airlines$DELAY, p = 0.8, list = FALSE)
df_tr <- airlines[trainIndex, ]
df_tr <- dplyr::select(df_tr, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
df_te <- airlines[-trainIndex, ]
df_te <- dplyr::select(df_te, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
########### WINDOW CROSS-VALIDATION ##############
# Best hyperparameters:
# Define the window size and step
window_size <- 1000  # Set the window size
window_step <- 500  # Set the window step
airlines2 <- airlines
# Change the FL_DATE variable directly
airlines2$FL_DATE <- ymd(airlines2$FL_DATE)
# Extract month and day from FL_DATE
airlines2$Month <- month(airlines2$FL_DATE)
airlines2$Day <- day(airlines2$FL_DATE)
# Select the categorical variables to encode
cat_vars <- c("OP_CARRIER","ORIGIN","DEST")
# Perform one-hot encoding for each variable using lapply() and model.matrix()
encoded_vars <- lapply(airlines2[cat_vars], function(x) model.matrix(~x-1, data = airlines2))
# Rename the encoded columns with more informative names
for (i in seq_along(cat_vars)) {
var_name <- cat_vars[i]
var_levels <- levels(airlines2[[var_name]])
col_names <- paste0(var_name, "_", var_levels)
colnames(encoded_vars[[i]]) <- col_names
}
# Combine the encoded variables into a single data frame using cbind()
airlines2 <- cbind(airlines, do.call(cbind, encoded_vars))
# Remove the original columns
airlines2 <- airlines2 %>% dplyr::select(-c("OP_CARRIER","ORIGIN","DEST"))
# Create a table for head(bank)
table_head <- kable(head(airlines2), format = "html", row.names = FALSE) %>%
kable_styling(full_width = FALSE, html_font = "Arial")
# Print the table
table_head
# removing FL_Date
airlines2 <- dplyr::select(airlines2, -FL_DATE)
# Convert Delay to numerical
airlines2$DELAY <- as.numeric(airlines2$DELAY)
# Set the seed for reproducibility
set.seed(123)
# Perform PCA
airlines_pca <- PCA(airlines2[,], ncp = 11 , graph = FALSE)
# Visualize the variance explained
plot_var <- fviz_pca_var(airlines_pca)
plot_var <- ggplotly(plot_var)
# Visualize the PCA biplot
plot_biplot <- fviz_pca_biplot(airlines_pca)
plot_biplot <- ggplotly(plot_biplot)
# Visualize the contributions to the first principal component
plot_contrib1 <- fviz_contrib(airlines_pca, choice = "var", axes = 1)
plot_contrib1 <- ggplotly(plot_contrib1)
# Visualize the contributions to the second principal component
plot_contrib2 <- fviz_contrib(airlines_pca, choice = "var", axes = 2)
plot_contrib2 <- ggplotly(plot_contrib2)
# Visualize the eigenvalues
plot_eig <- fviz_eig(airlines_pca, addlabels = TRUE, ncp = 30)
plot_eig <- ggplotly(plot_eig)
# Display the interactive plots
plot_var
plot_biplot
plot_contrib1
plot_contrib2
plot_eig
unlink("~/Desktop/2nd module /Machine Learning/Group_U_ml_2023/Untitled_cache", recursive = TRUE)
source(here::here("scripts/setup.R"))
# Import the CSV file
airlines <- read.csv(here("data", "2018.csv"))
# Filter the original data with the Top 10 airports with highest departure flights
airlines <- airlines %>%
filter(ORIGIN %in% c("ATL", "CLT", "DEN", "DFW", "LAS", "LAX", "LGA", "MSP", "ORD", "PHX"))
# We select 50 destinations at random
set.seed(123)
selected_destinations <- airlines %>%
distinct(DEST) %>%
sample_n(min(50, n()))
# Filter the original dataset with the destinations
airlines <- airlines %>%
filter(DEST %in% selected_destinations$DEST)
# Check the number of rows in the data frame
total_rows <- nrow(airlines)
# Set the desired number of random observations
n <- 12000
# Randomly select the indices of the observations
set.seed(123)
random_indices <- sample(1:total_rows, n)
# Subset the dataframe using the random indices
airlines <- airlines[random_indices, ]
# For classification purposes, we add a binary variable called DELAY.
airlines$DELAY <- ifelse(airlines$DEP_DELAY > 15, 1, 0)
airlines$DELAY <- as.factor(airlines$DELAY)
str(airlines)
summary(airlines)
introduce(airlines)
# Change the FL_DATE variable directly
airlines$FL_DATE <- ymd(airlines$FL_DATE)
str(airlines$FL_DATE)
airlines <- dplyr::select(airlines, -Unnamed..27)
plot_missing(airlines) # check missing values
# Replace NA values with 0 in selected columns
airlines <- airlines %>%
mutate(
CARRIER_DELAY = ifelse(is.na(CARRIER_DELAY), 0, CARRIER_DELAY),
WEATHER_DELAY = ifelse(is.na(WEATHER_DELAY), 0, WEATHER_DELAY),
NAS_DELAY = ifelse(is.na(NAS_DELAY), 0, NAS_DELAY),
SECURITY_DELAY = ifelse(is.na(SECURITY_DELAY), 0, SECURITY_DELAY),
LATE_AIRCRAFT_DELAY = ifelse(is.na(LATE_AIRCRAFT_DELAY), 0, LATE_AIRCRAFT_DELAY)
)
plot_missing(airlines)
airlines %>%
filter_all(any_vars(is.na(.))) %>%
slice(1:5) %>%
kable()
# Let's explore the NA's: we compute the % of cancellation flights to see if they correspond to the % of missing values of: DEP_TIME, DEP_DELAY, TAXI_OUT, WHEELS_OFF, WHEELS_ON, TAXI_IN, ARR_TIME, ARR_DELAY:
freq <- table(airlines$CANCELLED)
perc_1 <- freq[2] / length(airlines$CANCELLED) * 100
perc_0 <- freq[1] / length(airlines$CANCELLED) * 100
cat("Percentage of 1's:", round(perc_1, 2), "%\n")
cat("Percentage of 0's:", round(perc_0, 2), "%\n")
summary(airlines$ARR_DELAY)
boxplot(airlines$ARR_DELAY)
# We select columns that we will use to convert the integer to factor
my_cols <- c(2, 4, 5, 16, 17, 18)
# loop over each column and convert to factor in the bank dataset
for (i in seq_along(my_cols)) {
airlines[[my_cols[i]]] <- factor(airlines[[my_cols[i]]])
}
airlines <- airlines[!is.na(airlines$DELAY), ]
airlines <- dplyr::select(airlines, -CANCELLED, - CANCELLATION_CODE, -DIVERTED)
plot_missing(airlines)
airlines <- replace(airlines, is.na(airlines), 0)
###########  FIXED SPLIT ##############
# First step is to arrange the data from earliest to latest date
airlines <-  airlines %>% arrange(FL_DATE)
# Split_date using 80% for training and 20% testing; 80% of 12 is 9.6 so training from January until 18th of September. Testing between 19th of September until end of December.
split_date <- as.Date("2018-09-18")
# Split the data
df_tr_date <- airlines[airlines$FL_DATE < split_date, ]
df_tr_date <- dplyr::select(df_tr_date, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
df_te_date <- airlines[airlines$FL_DATE >= split_date, ]
df_te_date <- dplyr::select(df_te_date, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
########### RANDOM SPLIT ##############
set.seed(123)
trainIndex <- createDataPartition(airlines$DELAY, p = 0.8, list = FALSE)
df_tr <- airlines[trainIndex, ]
df_tr <- dplyr::select(df_tr, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
df_te <- airlines[-trainIndex, ]
df_te <- dplyr::select(df_te, -DEP_TIME, -DEP_DELAY, -TAXI_IN, -TAXI_OUT, -WHEELS_OFF, -WHEELS_ON, -ARR_TIME, -ARR_DELAY, -ACTUAL_ELAPSED_TIME, -AIR_TIME, -NAS_DELAY, -WEATHER_DELAY,-CARRIER_DELAY,-SECURITY_DELAY, -LATE_AIRCRAFT_DELAY)
########### WINDOW CROSS-VALIDATION ##############
# Best hyperparameters:
# Define the window size and step
window_size <- 1000  # Set the window size
window_step <- 500  # Set the window step
airlines2 <- airlines
# Change the FL_DATE variable directly
airlines2$FL_DATE <- ymd(airlines2$FL_DATE)
# Extract month and day from FL_DATE
airlines2$Month <- month(airlines2$FL_DATE)
airlines2$Day <- day(airlines2$FL_DATE)
# Select the categorical variables to encode
cat_vars <- c("OP_CARRIER","ORIGIN","DEST")
# Perform one-hot encoding for each variable using lapply() and model.matrix()
encoded_vars <- lapply(airlines2[cat_vars], function(x) model.matrix(~x-1, data = airlines2))
# Rename the encoded columns with more informative names
for (i in seq_along(cat_vars)) {
var_name <- cat_vars[i]
var_levels <- levels(airlines2[[var_name]])
col_names <- paste0(var_name, "_", var_levels)
colnames(encoded_vars[[i]]) <- col_names
}
# Combine the encoded variables into a single data frame using cbind()
airlines2 <- cbind(airlines, do.call(cbind, encoded_vars))
# Remove the original columns
airlines2 <- airlines2 %>% dplyr::select(-c("OP_CARRIER","ORIGIN","DEST"))
# Create a table for head(bank)
table_head <- kable(head(airlines2), format = "html", row.names = FALSE) %>%
kable_styling(full_width = FALSE, html_font = "Arial")
# Print the table
table_head
# removing FL_Date
airlines2 <- dplyr::select(airlines2, -FL_DATE)
# Convert Delay to numerical
airlines2$DELAY <- as.numeric(airlines2$DELAY)
library(factoextra)
library(plotly)
# Set the seed for reproducibility
set.seed(123)
# Perform PCA
airlines_pca <- PCA(airlines2[,], ncp = 11 , graph = FALSE)
# Visualize the variance explained
plot_var <- fviz_pca_var(airlines_pca)
plot_var <- ggplotly(plot_var) %>%
layout(width = 800, height = 600)
# Visualize the PCA biplot
plot_biplot <- fviz_pca_biplot(airlines_pca)
plot_biplot <- ggplotly(plot_biplot) %>%
layout(width = 800, height = 600)
# Arrange the two plots side by side
subplot(plot_var, plot_biplot, nrows = 1)
# Visualize the contributions to the first principal component
plot_contrib1 <- fviz_contrib(airlines_pca, choice = "var", axes = 1)
plot_contrib1 <- ggplotly(plot_contrib1) %>%
layout(width = 800, height = 600)
# Visualize the contributions to the second principal component
plot_contrib2 <- fviz_contrib(airlines_pca, choice = "var", axes = 2)
plot_contrib2 <- ggplotly(plot_contrib2) %>%
layout(width = 800, height = 600)
# Arrange the two plots side by side
subplot(plot_contrib1, plot_contrib2, nrows = 1)
# Visualize the eigenvalues
plot_eig <- fviz_eig(airlines_pca, addlabels = TRUE, ncp = 30)
plot_eig <- ggplotly(plot_eig) %>%
layout(width = 800, height = 600)
# Display the interactive plots
subplot(plot_eig)
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
